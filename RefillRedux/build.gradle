import groovy.io.FileType

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.6.+'
        //make spoon work with gradle
        classpath 'de.felixschulze.gradle:gradle-spoon-plugin:1.0.1+'
    }
}
apply plugin: 'android'
apply plugin: 'spoon'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
        //our own test runner
        testInstrumentationRunner "runners.SpoonInstrumentationTestRunner"
        //test apk's package name
        testPackageName "com.praeses.refillredux.tests"
    }
    buildTypes {
        release {
            runProguard false
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }
    }
    productFlavors {
        defaultFlavor {
            proguardFile 'proguard-rules.txt'
        }
        red {
            packageName 'com.praeses.refillredux.red'
        }
        blue {
            packageName 'com.praeses.refillredux.blue'
        }
        green {
            packageName 'com.praeses.refillredux.green'
        }
        purple {
            packageName 'com.praeses.refillredux.purple'
        }
    }
}

spoon {
    teamCityLog = true
    debug = true
    failOnFailure = false
    testSizes = ['small', 'medium']
    adbTimeout = 10 * 60
    failIfNoDeviceConnected = false
}

dependencies {
    compile 'com.android.support:support-v4:19.0.0'
    compile 'com.android.support:appcompat-v7:19.0.0'
    compile 'com.jakewharton:butterknife:4.0.1'
    //libraries to compile for the test project
    instrumentTestCompile files('libs/espresso-1.0-SNAPSHOT-bundled.jar')
    instrumentTestCompile 'com.squareup.spoon:spoon-client:1.1.0'
}
/*
task windowsSpoonAll(type:Exec) {
    def folder = "RefillRedux/src";
    def baseDir = new File(folder);
    def list = ""
    baseDir.eachFile(FileType.DIRECTORIES) { dir ->
        if (!dir.name.equals("instrumentTest") && !dir.name.equals("main"))
            list += 'gradlew spoon' + dir.name.capitalize() + 'Test && '
    }
    list = list.substring(0, list.length() - 3)
    println "in windowsSpoonAll"
    println list
    workingDir = '../'
    commandLine 'cmd', '/c', list
}
*/
task linuxRetry {
    def folder = "RefillRedux/src";
    def baseDir = new File(folder);
    workingDir = '../'
    println "pwd".execute().text
    baseDir.eachFile(FileType.DIRECTORIES) { dir ->
        if (!dir.name.equals("instrumentTest") && !dir.name.equals("main")) {
            def processName ="gradlew spoon" + dir.name.capitalize() + "Test"
            doLast {
                println processName.execute().text
            }
        }
    }
}
/*
task linuxSpoonAll(type:Exec) {
    def folder = "RefillRedux/src";
    def baseDir = new File(folder);
    def list = ""
    workingDir = '../'
    baseDir.eachFile(FileType.DIRECTORIES) { dir ->
        if (!dir.name.equals("instrumentTest") && !dir.name.equals("main")) {
            //list += 'gradlew spoon' + dir.name.capitalize() + 'Test && '
            //commandLine 'gradlew','spoon' + dir.name.capitalize() + 'Test'
            doLast {
                println ("gradlew spoon" + dir.name.capitalize() + 'Test').execute().text
            }
        }
    }
    //list = list.substring(0, list.length() - 3)
    println "linuxSpoonAll"
    //println list
    //commandLine list
}
*/




